#+TITLE: Emacs Dotfile
#+AUTHOR: Mickael Fortunato
#+EMAIL: morsi.morsicus@gmail.com
#+OPTIONS: num:nil
* Basic configuration
#+BEGIN_SRC emacs-lisp
  ;; Remove startup message
  (setq inhibit-startup-message t)

  ;; Make escape quit prompt
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (scroll-bar-mode -1) ;; Disable scroll bar
  (tool-bar-mode -1)   ;; Disable the tool bar
  (tooltip-mode -1)    ;; Disable tooltip
  (set-fringe-mode 10) ;; Give some breathing room
  (menu-bar-mode -1)   ;; Disable menu bar

  ;; Fullscreen at startup
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Enable line number
  (column-number-mode)
  (global-display-line-numbers-mode t)
#+END_SRC
* Packages
** Repositories
#+BEGIN_SRC emacs-lisp
	;; Initialize packages
	(require 'package)
	(setq package-archives '(("melpa" . "https://melpa.org/packages/")
				 ("org" . "https://orgmode.org/elpa/")
				 ("elpa" . "https://elpa.gnu.org/packages/")))

	(unless package-archive-contents
	  (package-refresh-contents))

	;; Install use-package if not present
	(unless (package-installed-p 'use-package)
	  (package-install 'use-package))

	(require 'use-package)
  (setq use-package-always-ensure t)

  (require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
#+END_SRC
** [[https://github.com/radian-software/straight.el][Straight.el]]
Straight.el is a purely functional package manager.
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (setq package-enable-at-startup nil)
  (straight-use-package 'org)
#+END_SRC
* Shortcuts
** [[https://github.com/justbur/emacs-which-key][Which-key]]
Which-key is a Emacs Minor mode that I particularly like. It displays the key bindings based on the current key that you pressed.
When you start to have multiple shortcut it becomes very handy.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :straight t
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+END_SRC
** [[https://github.com/emacs-evil/evil][Evil]]
As a former heavy Vim/Neovim user, I cannot live without Vim like keybindings... Or at least I don't want to try.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :straight t
    :init
    (setq evil-want-integration t)
    (setq evil-undo-system 'undo-redo)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
#+END_SRC
** [[https://github.com/emacs-evil/evil][Evil-collection]]
It's a collection of evil (Vim) keybindings that try to cover some blindspots of the original evil-mode.
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :straight t
    :after evil
    :config
    (evil-collection-init))
#+END_SRC
** [[https://github.com/abo-abo/hydra][Hydra]]
Hydra is package helping to repeat an action without retyping a shortcut.
The good example is when you are doing a prensentation on Emacs and you want to zoom-in in order to make the text readable for everyone.
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :straight t)

  (defhydra hydra-text-scale (:timeout 5)
    "scale text"
    ("+" text-scale-increase "in")
    ("-" text-scale-decrease "out")
    ("k" nil "finished" :exit t))
#+END_SRC
** [[https://github.com/noctuid/general.el][General]]
It's a package that ease the process of keybinding. Especially for Evil user.
I use it a lot to mimic the shortcut of [[https://github.com/syl20bnr/spacemacs][Spacemacs]] and other "Space-based" shortcut distibutions
#+BEGIN_SRC emacs-lisp
  (defun morsicus/open-emacs-config-file ()
    "Open my .emacs"
    (interactive)
    (find-file "~/.config/emacs/config.org"))

  (use-package general
    :straight t
    :config
    (general-create-definer morsicus/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (morsicus/leader-keys
      "a"  '(:ignore t :which-key "apps")
      "ag" '(magit-status :which-key "git")

      "f"  '(:ignore t :which-key "files")
      "ff"  '(find-file :which-key "find")
      "fs"  '(consult-line :which-key "search")
      "fS"  '(consult-imenu :which-key "search-imenu")
      "fe"  '(:ignore t :which-key "emacs-files")
      "fed"  '(morsicus/open-emacs-config-file :which-key "config-file")

      "l"  '(:ignore t :which-key "lsp")

      "g"  '(:ignore t :which-key "go")
      "gd" '(lsp-find-definition :which-key "definition")
      "gr" '(lsp-ui-peek-find-references :which-key "references")


      "x"  '(:ignore t :which-key "exec")
      "xx" '(counsel-M-x :which-key "M-x")
      "xe" '(eval-last-sexp :which-key "eval-last-sexp")
      "z"  '(hydra-text-scale/body :which-key "zoom")))
#+END_SRC
* Theme & Fanciness
#+BEGIN_SRC emacs-lisp
  ;; NOTE: The first time that this configuration is loaded
  ;; You'll need to run those commands manually:
  ;; M-x all-the-icons-install-fonts
  (use-package all-the-icons
    :straight t)

  ;; Enable cool icons in dired
  (use-package all-the-icons-dired
    :straight t
    :ensure t
    :hook
    (dired-mode . all-the-icons-dired-mode)
    )

  ;; Enable cool icons in ivy
  (use-package all-the-icons-ivy
    :straight t
    :ensure t
    :init
    (all-the-icons-ivy-setup))

  (use-package doom-themes
    :straight t
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-palenight t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  ;; Prettier Mode line
  (use-package doom-modeline
    :straight t
    :ensure t
    :init (doom-modeline-mode 1))
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
* Buffers and Windows
** Buffers
*** Shortcuts
#+BEGIN_SRC emacs-lisp
  (morsicus/leader-keys
    "b"  '(:ignore t :which-key "buffers")
    "bb" '(consult-buffer :which-key "list")
    "bd" '(kill-buffer :which-key "kill")
    "bD" '(morsicus/kill-other-buffers :which-key "kill-others")
    "bn" '(next-buffer :which-key "next")
    "bp" '(previous-buffer :which-key "previous"))
#+END_SRC
*** Custom function to kill buffer except the current one
#+BEGIN_SRC emacs-lisp
  (defun morsicus/kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+END_SRC
** Windows/Splits
#+BEGIN_SRC emacs-lisp
  ;; Ease the process to move across windows
  ;; Use <shift+Arrow>
  (windmove-default-keybindings)
  (require 'general)
  (morsicus/leader-keys
    "w"  '(:ignore t :which-key "windows")
    "w-" '(split-window-vertically :which-key "vsplit")
    "w/" '(split-window-horizontally :which-key "split")
    "wd" '(delete-window :which-key "delete")
    "wD" '(delete-other-windows :which-key "delete"))
#+END_SRC
* Development
** Basis
#+BEGIN_SRC emacs-lisp
  ;; Magit
  (use-package magit
    :straight t)
#+END_SRC
* Org-Mode and Note Taking
I'm used to take notes into [[https://obsidian.md/][Obsidian]] and [[https://logseq.com/][Logseq]] and other alternatives.
Moving to org-mode is a way to bring everything (ie. Notes, Code, Mails, ...) in the same tool to avoid as much as possible swithing context.

Wy workflow is heavily inspired by the [[https://en.wikipedia.org/wiki/Zettelkasten][Zettelkasten Method]].

If we try to sum-up quickly, what I want to achieve with org-mode are the following goals:
- Get into Emacs everything that I read/highlight from my different devices (ie. I spend a big part of my time reading on my phone/tablette/Kindle)
- Being able to create without any friction new notes. Everytime that I have a thought.
- Link my notes together and discover new connected nodes in a Graph View like
- Being able to export and publish some notes in HTML, for example
- Managing my tasks and calendar in Emacs would be an amazing plus. Especially because I feel more productive when I'm able to plan and time-lock my day of work.
** org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight t
    :config
    (setq org-agenda-files
	  '("~/Documents/Org/Roam/20230122104808-inbox.org"))
    (setq org-agenda-custom-commands
	  '((" " "My Daily Agenda"
	     ((agenda ""
		      ((org-agenda-span 'day)))
	      (todo "TODO"
		    ((org-agenda-overriding-header "Unscheduled Tasks")
		     (org-agenda-files '("~/Documents/Org/Roam/20230122104808-inbox.org"))
		     (org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))))))))
    (setq org-capture-templates
	  '(("t" "Todo" entry (file+headline "~/Documents/Org/Roam/20230122104808-inbox.org" "Tasks to refile")
	     "* TODO %?\n  %i\n  %a")))
    (setq org-log-done 'time))
#+END_SRC
** [[https://www.orgroam.com/][org-roam]]
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :straight t
    :ensure t
    :custom
    (org-roam-directory "~/Documents/Org/Roam")
    (org-roam-dailies-capture-templates
     '(("d" "default" entry "* Inbox"
	:if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
    :general
    (morsicus/leader-keys
      "o"   '(:ignore t :which-key "org")
      "oa"   '(org-agenda :which-key "org-agenda")
      "ot"  '(:ignore t :which-key "org-task")
      "otd"  '(org-deadline :which-key "org-deadline")
      "ots"  '(org-schedule :which-key "org-schedule")
      "otl"  '(org-todo-list :which-key "org-todo-list")
      "otc"  '(org-capture :which-key "org-todo-capture")
      "otp"  '(org-priority :which-key "org-priority")
      "on"  '(:ignore t :which-key "org-notes")
      "ona"  '(org-roam-alias-add :which-key "roam-alias")
      "onc"  '(org-roam-capture :which-key "roam-capture")
      "onl"  '(org-roam-buffer-toggle :which-key "roam-list")
      "ono"  '(org-open-at-point :which-key "org-open")
      "onf"  '(org-roam-node-find :which-key "roam-find")
      "ont"  '(org-roam-tag-add :which-key "roam-tag")
      "ons"  '(morsicus/org-roam-rg-search :which-key "morsicus/org-roam-rg-search")
      "oni"  '(morsicus/org-roam-node-insert :which-key "roam-insert"))
    :config
    (require 'org-roam-dailies)
    (org-roam-setup))
#+END_SRC

** [[https://github.com/org-roam/org-roam-ui][org-roam-ui]]
#+BEGIN_SRC emacs-lisp
  (use-package org-roam-ui
    :straight t
    :after org-roam
    :general
    (morsicus/leader-keys
      "o"  '(:ignore t :which-key "org")
      "og" '(org-roam-ui-open :which-key "roam-graph")))
#+END_SRC
