#+TITLE: Emacs Dotfile
#+AUTHOR: Mickael Fortunato
#+EMAIL: morsi.morsicus@gmail.com
#+OPTIONS: num:nil
* Basic configuration
#+BEGIN_SRC emacs-lisp
  ;; Remove startup message
  (setq inhibit-startup-message t)

  ;; Make escape quit prompt
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (scroll-bar-mode -1) ;; Disable scroll bar
  (tool-bar-mode -1)   ;; Disable the tool bar
  (tooltip-mode -1)    ;; Disable tooltip
  (set-fringe-mode 10) ;; Give some breathing room
  (menu-bar-mode -1)   ;; Disable menu bar

  ;; Fullscreen at startup
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Enable line number
  (column-number-mode)
  (global-display-line-numbers-mode t)
#+END_SRC
* Repositories
#+BEGIN_SRC emacs-lisp
  ;; Initialize packages
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (unless package-archive-contents
    (package-refresh-contents))

  ;; Install use-package if not present
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC
* Completion
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper))
    :config
    (ivy-mode 1)
    (setq ivy-use-selectable-prompt t))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history)))

  (use-package ivy-rich
    :init (ivy-rich-mode 1))
#+END_SRC
* Snippets
I like to use Snippets to avoid typing repeated piece of code.

However, I do not like too much to take a full collection of snippets created by someone else.
You end up with most of the snippet not used.

However, the collection like [[https://github.com/AndreaCrotti/yasnippet-snippets/][Github/AndreaCrotti/yasnippets-snippets]] can be a good source of inspiration.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (yas-reload-all)
    (add-to-list 'yas-snippet-dirs "~/.config/emacs/snippets")
    (yas-global-mode 1))
#+END_SRC

* Theme & Fanciness
#+BEGIN_SRC emacs-lisp
  ;; NOTE: The first time that this configuration is loaded
  ;; You'll need to run those commands manually:
  ;; M-x all-the-icons-install-fonts
  (use-package all-the-icons)

  ;; Enable cool icons in dired
  (use-package all-the-icons-dired
    :ensure t
    :hook
    (dired-mode . all-the-icons-dired-mode)
    )

  ;; Enable cool icons in ivy
  (use-package all-the-icons-ivy
    :ensure t
    :init
    (all-the-icons-ivy-setup))

  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-palenight t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  ;; Prettier Mode line
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
* Shortcuts
** [[https://github.com/justbur/emacs-which-key][Which-key]]
Which-key is a Emacs Minor mode that I particularly like. It displays the key bindings based on the current key that you pressed.
When you start to have multiple shortcut it becomes very handy.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+END_SRC
** [[https://github.com/emacs-evil/evil][Evil]]
As a former heavy Vim/Neovim user, I cannot live without Vim like keybindings... Or at least I don't want to try.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-undo-system 'undo-redo)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
#+END_SRC
** [[https://github.com/emacs-evil/evil][Evil-collection]]
It's a collection of evil (Vim) keybindings that try to cover some blindspots of the original evil-mode.
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+END_SRC
** [[https://github.com/abo-abo/hydra][Hydra]]
Hydra is package helping to repeat an action without retyping a shortcut.
The good example is when you are doing a prensentation on Emacs and you want to zoom-in in order to make the text readable for everyone.
#+BEGIN_SRC emacs-lisp
  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 5)
    "scale text"
    ("+" text-scale-increase "in")
    ("-" text-scale-decrease "out")
    ("k" nil "finished" :exit t))
#+END_SRC
** [[https://github.com/noctuid/general.el][General]]
It's a package that ease the process of keybinding. Especially for Evil user.
I use it a lot to mimic the shortcut of [[https://github.com/syl20bnr/spacemacs][Spacemacs]] and other "Space-based" shortcut distibutions
#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-create-definer morsicus/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (morsicus/leader-keys
      "a"  '(:ignore t :which-key "apps")
      "ag" '(magit-status :which-key "git")

      "b"  '(:ignore t :which-key "buffers")
      "bb" '(switch-to-buffer :which-key "list")
      "bd" '(kill-buffer :which-key "kill")
      "bD" '(morsicus/kill-other-buffers :which-key "kill-others")
      "bn" '(next-buffer :which-key "next")
      "bp" '(previous-buffer :which-key "previous")

      "f"  '(:ignore t :which-key "files")
      "ff" '(counsel-find-file :which-key "find")

      "l"  '(:ignore t :which-key "lsp")

      "g"  '(:ignore t :which-key "go")
      "gd" '(lsp-find-definition :which-key "definition")
      "gr" '(lsp-ui-peek-find-references :which-key "references")

      "/"  '(swiper-isearch :which-key "search")

      "x"  '(:ignore t :which-key "exec")
      "xx" '(counsel-M-x :which-key "M-x")
      "xe" '(eval-last-sexp :which-key "eval-last-sexp")
      "z"  '(hydra-text-scale/body :which-key "zoom")))
#+END_SRC
*** TODO Split the general configuration into mutliple pieces
* Buffers and Windows
** Buffers
#+BEGIN_SRC emacs-lisp
  (defun morsicus/kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+END_SRC
** Windows/Splits
#+BEGIN_SRC emacs-lisp
  ;; Ease the process to move across windows
  ;; Use <shift+Arrow>
  (windmove-default-keybindings)
  (require 'general)
  (morsicus/leader-keys
    "w"  '(:ignore t :which-key "windows")
    "w/" '(split-window-vertically :which-key "vsplit")
    "w-" '(split-window-horizontally :which-key "split")
    "wd" '(delete-window :which-key "delete")
    "wD" '(delete-other-windows :which-key "delete"))
#+END_SRC
* Development
** Basis
#+BEGIN_SRC emacs-lisp
  ;; Magit
  (use-package magit)
#+END_SRC
** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook ((python-mode go-mode) . lsp-deferred)
    :demand t
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (setq lsp-auto-configure t)
    (lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :config
    (setq lsp-ui-flycheck-enable t)
    (add-to-list 'lsp-ui-doc-frame-parameters '(no-accept-focus . t))
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references))

  (use-package lsp-ivy)

  ;; Autocompletion
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
		("<tab>" . company-complete-selection))
    (:map lsp-mode-map
	  ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  ;; Java
  (use-package lsp-java
    :config (add-hook 'java-mode-hook 'lsp))

  (use-package go-mode
    :config (add-hook 'go-mode-hook 'lsp-deferred))

  (use-package terraform-mode
    :config (add-hook 'terraform-mode-hook 'lsp-deferred))
#+END_SRC
* Org-Mode and Note Taking
I'm used to take notes into [[https://obsidian.md/][Obsidian]] and [[https://logseq.com/][Logseq]] and other alternatives.
Moving to org-mode is a way to bring everything (ie. Notes, Code, Mails, ...) in the same tool to avoid as much as possible swithing context.

Wy workflow is heavily inspired by the [[https://en.wikipedia.org/wiki/Zettelkasten][Zettelkasten Method]].

If we try to sum-up quickly, what I want to achieve with org-mode are the following goals:
- Get into Emacs everything that I read/highlight from my different devices (ie. I spend a big part of my time reading on my phone/tablette/Kindle)
- Being able to create without any friction new notes. Everytime that I have a thought.
- Link my notes together and discover new connected nodes in a Graph View like
- Being able to export and publish some notes in HTML, for example
- Managing my tasks and calendar in Emacs would be an amazing plus. Especially because I feel more productive when I'm able to plan and time-lock my day of work.
** [[https://www.orgroam.com/][org-roam]]
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/Documents/Org/Roam")
    :general
    (morsicus/leader-keys
      "o"  '(:ignore t :which-key "org")
      "oa" '(org-roam-alias-add :which-key "roam-alias")
      "od" '(morsicus/hydra-org-roam-capture-daily/body :which-key "capture-daily")
      "oj" '(morsicus/hydra-org-roam-journal/body :which-key "roam-journal")
      "oc" '(org-roam-capture :which-key "capture")
      "oo" '(org-open-at-point :which-key "open")
      "ol" '(org-roam-buffer-toggle :which-key "roam-list")
      "of" '(org-roam-node-find :which-key "roam-find")
      "oi" '(morsicus/org-roam-node-insert :which-key "roam-insert"))
    :config
    (require 'org-roam-dailies)
    (org-roam-setup))
#+END_SRC
*** Custom Hydra functions
**** Interactive menu to capture in daily entries
#+BEGIN_SRC emacs-lisp
  (require 'hydra)
  (defhydra morsicus/hydra-org-roam-capture-daily ()
    "
    Choose a Journal entry to capture in:
    _t_ Today
    _T_ Tomorrow
    _y_ Yesterday

    _q_ Do Nothing
    "
    ("q" nil)
    ("t" org-roam-dailies-capture-today)
    ("T" org-roam-dailies-capture-tomorrow)
    ("y" org-roam-dailies-capture-yesterday))
#+END_SRC
**** Interactive menu to quickly get a daily node
#+BEGIN_SRC emacs-lisp
  (require 'hydra)
  (defhydra morsicus/hydra-org-roam-journal ()
    "
    Choose a Journal entry to get:
    _t_ Today
    _T_ Tomorrow
    _y_ Yesterday
    _a_ Agenda (Choose a date)

    _q_ Do Nothing
    "
    ("q" nil)
    ("t" org-roam-dailies-goto-today)
    ("T" org-roam-dailies-goto-tomorrow)
    ("y" org-roam-dailies-goto-yesterday)
    ("a" org-roam-dailies-goto-date))
#+END_SRC
*** Custom function to fix the org-roam-node-insert in Evil mode
When using org-roam-node-insert function provided by org-roam with Evil in Normal mode I cannot smoothly create a new node in the current note.
The link to the node in added before the cursor. Which is annoying.

The following piece of code comes from [[https://gist.github.com/daniel-koudouna/39f03845914e34acde4d4c6a27c5176a][Gist]].
#+BEGIN_SRC emacs-lisp
  (defun morsicus/is-end-of-line ()
    "Compare point with end of line."
    (let* ((pos (current-column))
	   (end-pos (save-excursion
		      (evil-end-of-line)
		      (current-column))))
      (eq pos end-pos)))

  (defun morsicus/compare-with-end-of-word ()
    "Compare point with end of word."
    (let* ((pos (current-column))
	   (end-pos (save-excursion
		      (evil-backward-word-begin)
		      (evil-forward-word-end)
		      (current-column))))
      (- pos end-pos)))

  (defun morsicus/point-is-space ()
    "Check if point is whitespace."
    (char-equal ?\s (char-after)))

  (defun morsicus/insert-after (func)
    "Run FUNC after the end of word, ignoring whitespace."
    (interactive)
    (let ((relative-loc (morsicus/compare-with-end-of-word)))
      (cond ((morsicus/is-end-of-line)
	     (end-of-line)
	     (call-interactively func))
	    ((eq 0 relative-loc)
	     (evil-forward-char)
	     (call-interactively func))
	    ((and (> 0 relative-loc) (not (morsicus/point-is-space)))
	     (evil-forward-word-end)
	     (if (morsicus/is-end-of-line)
		 (end-of-line)
	       (evil-forward-char))
	     (call-interactively func))
	    (t
	     (call-interactively func)))))
  (defun morsicus/org-roam-node-insert ()
    "Custom org-roam-node-insert to ensure that the link appears after the cursor."
    (interactive)
    (morsicus/insert-after 'org-roam-node-insert))
#+END_SRC

** [[https://github.com/org-roam/org-roam-ui][org-roam-ui]]
#+BEGIN_SRC emacs-lisp
  (use-package org-roam-ui
    :after org-roam
    :general
    (morsicus/leader-keys
      "o"  '(:ignore t :which-key "org")
      "og" '(org-roam-ui-open :which-key "roam-graph")))
#+END_SRC
