#+TITLE: Emacs Dotfile
#+AUTHOR: Mickael Fortunato
#+EMAIL: morsi.morsicus@gmail.com
#+OPTIONS: num:nil
* Basic configuration
#+BEGIN_SRC emacs-lisp
  ;; Remove startup message
  (setq inhibit-startup-message t)

  ;; Make escape quit prompt
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (scroll-bar-mode -1) ;; Disable scroll bar
  (tool-bar-mode -1)   ;; Disable the tool bar
  (tooltip-mode -1)    ;; Disable tooltip
  (set-fringe-mode 10) ;; Give some breathing room
  (menu-bar-mode -1)   ;; Disable menu bar

  ;; Fullscreen at startup
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Enable line number
  (column-number-mode)
  (global-display-line-numbers-mode t)
#+END_SRC
* Packages
** Repositories
#+BEGIN_SRC emacs-lisp
  ;; Initialize packages
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (unless package-archive-contents
    (package-refresh-contents))

  ;; Install use-package if not present
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC
** [[https://github.com/radian-software/straight.el][Straight.el]]
Straight.el is a purely functional package manager.
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (setq package-enable-at-startup nil)
  (straight-use-package 'org)
#+END_SRC
* Shortcuts
** [[https://github.com/justbur/emacs-which-key][Which-key]]
Which-key is a Emacs Minor mode that I particularly like. It displays the key bindings based on the current key that you pressed.
When you start to have multiple shortcut it becomes very handy.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :straight t
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+END_SRC
** [[https://github.com/emacs-evil/evil][Evil]]
As a former heavy Vim/Neovim user, I cannot live without Vim like keybindings... Or at least I don't want to try.
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :straight t
    :init
    (setq evil-want-integration t)
    (setq evil-undo-system 'undo-redo)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
#+END_SRC
** [[https://github.com/emacs-evil/evil][Evil-collection]]
It's a collection of evil (Vim) keybindings that try to cover some blindspots of the original evil-mode.
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :straight t
    :after evil
    :config
    (evil-collection-init))
#+END_SRC
** [[https://github.com/abo-abo/hydra][Hydra]]
Hydra is package helping to repeat an action without retyping a shortcut.
The good example is when you are doing a prensentation on Emacs and you want to zoom-in in order to make the text readable for everyone.
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :straight t)

  (defhydra hydra-text-scale (:timeout 5)
    "scale text"
    ("+" text-scale-increase "in")
    ("-" text-scale-decrease "out")
    ("k" nil "finished" :exit t))
#+END_SRC
** [[https://github.com/noctuid/general.el][General]]
It's a package that ease the process of keybinding. Especially for Evil user.
I use it a lot to mimic the shortcut of [[https://github.com/syl20bnr/spacemacs][Spacemacs]] and other "Space-based" shortcut distibutions
#+BEGIN_SRC emacs-lisp
  (defun morsicus/open-emacs-config-file ()
    "Open my .emacs"
    (interactive)
    (find-file "~/.config/emacs/config.org"))

  (use-package general
    :straight t
    :config
    (general-create-definer morsicus/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (morsicus/leader-keys
      "a"  '(:ignore t :which-key "apps")
      "ag" '(magit-status :which-key "git")

      "f"  '(:ignore t :which-key "files")
      "ff"  '(find-file :which-key "find")
      "fs"  '(consult-line :which-key "search")
      "fS"  '(consult-imenu :which-key "search-imenu")
      "fe"  '(:ignore t :which-key "emacs-files")
      "fed"  '(morsicus/open-emacs-config-file :which-key "config-file")

      "l"  '(:ignore t :which-key "lsp")

      "g"  '(:ignore t :which-key "go")
      "gd" '(lsp-find-definition :which-key "definition")
      "gr" '(lsp-ui-peek-find-references :which-key "references")


      "x"  '(:ignore t :which-key "exec")
      "xx" '(counsel-M-x :which-key "M-x")
      "xe" '(eval-last-sexp :which-key "eval-last-sexp")
      "z"  '(hydra-text-scale/body :which-key "zoom")))
#+END_SRC
* Completion
** vertico
#+BEGIN_SRC emacs-lisp
  (use-package vertico
    :straight t
    :init
    (vertico-mode))
#+END_SRC
** [[https://github.com/oantolin/orderless][orderless package]]
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :straight t
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC
** [[https://github.com/minad/marginalia][marginalia]]
Add some annotations/notes in the minibuffer completion
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :straight t
    ;; Either bind `marginalia-cycle' globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
	   :map minibuffer-local-map
	   ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+END_SRC
** [[https://github.com/minad/consult/][consult.el]]
*** General conf
#+BEGIN_SRC emacs-lisp
  (use-package consult
    :straight t
    :bind (;; C-c bindings (mode-specific-map)
	   ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	   ;; Other custom bindings
	   ("C-s" . consult-line)
	   ("M-y" . consult-yank-pop))

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init
    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
	  register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
	  xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key (kbd "M-.")
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<"))
#+END_SRC
*** [[https://github.com/karthink/consult-dir][consult-dir]]
#+BEGIN_SRC emacs-lisp
  (use-package consult-dir
    :straight t
    :ensure t
    :bind (("C-x C-d" . consult-dir)
	   :map vertico-map
	   ("C-x C-d" . consult-dir)
	   ("C-x C-j" . consult-dir-jump-file)))
  (require 'general)
  (morsicus/leader-keys
      "d" '(consult-dir :which-key "consult-dir"))
#+END_SRC
* Snippets
I like to use Snippets to avoid typing repeated piece of code.

However, I do not like too much to take a full collection of snippets created by someone else.
You end up with most of the snippet not used.

However, the collection like [[https://github.com/AndreaCrotti/yasnippet-snippets/][Github/AndreaCrotti/yasnippets-snippets]] can be a good source of inspiration.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :straight t
    :config
    (yas-reload-all)
    (add-to-list 'yas-snippet-dirs "~/.config/emacs/snippets")
    (yas-global-mode 1))
#+END_SRC

* Theme & Fanciness
#+BEGIN_SRC emacs-lisp
  ;; NOTE: The first time that this configuration is loaded
  ;; You'll need to run those commands manually:
  ;; M-x all-the-icons-install-fonts
  (use-package all-the-icons
    :straight t)

  ;; Enable cool icons in dired
  (use-package all-the-icons-dired
    :straight t
    :ensure t
    :hook
    (dired-mode . all-the-icons-dired-mode)
    )

  ;; Enable cool icons in ivy
  (use-package all-the-icons-ivy
    :straight t
    :ensure t
    :init
    (all-the-icons-ivy-setup))

  (use-package doom-themes
    :straight t
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-palenight t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  ;; Prettier Mode line
  (use-package doom-modeline
    :straight t
    :ensure t
    :init (doom-modeline-mode 1))
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
* Buffers and Windows
** Buffers
*** Shortcuts
#+BEGIN_SRC emacs-lisp
  (morsicus/leader-keys
    "b"  '(:ignore t :which-key "buffers")
    "bb" '(consult-buffer :which-key "list")
    "bd" '(kill-buffer :which-key "kill")
    "bD" '(morsicus/kill-other-buffers :which-key "kill-others")
    "bn" '(next-buffer :which-key "next")
    "bp" '(previous-buffer :which-key "previous"))
#+END_SRC
*** Custom function to kill buffer except the current one
#+BEGIN_SRC emacs-lisp
  (defun morsicus/kill-other-buffers ()
    "Kill all other buffers."
    (interactive)
    (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+END_SRC
** Windows/Splits
#+BEGIN_SRC emacs-lisp
  ;; Ease the process to move across windows
  ;; Use <shift+Arrow>
  (windmove-default-keybindings)
  (require 'general)
  (morsicus/leader-keys
    "w"  '(:ignore t :which-key "windows")
    "w/" '(split-window-vertically :which-key "vsplit")
    "w-" '(split-window-horizontally :which-key "split")
    "wd" '(delete-window :which-key "delete")
    "wD" '(delete-other-windows :which-key "delete"))
#+END_SRC
* Development
** Basis
#+BEGIN_SRC emacs-lisp
  ;; Magit
  (use-package magit
    :straight t)
#+END_SRC
** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :straight t
    :commands (lsp lsp-deferred)
    :hook ((python-mode go-mode) . lsp-deferred)
    :demand t
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (setq lsp-auto-configure t)
    (lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :straight t
    :config
    (setq lsp-ui-flycheck-enable t)
    (add-to-list 'lsp-ui-doc-frame-parameters '(no-accept-focus . t))
    (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
    (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references))

  ;; Autocompletion
  (use-package company
    :straight t
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
		("<tab>" . company-complete-selection))
    (:map lsp-mode-map
	  ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :straight t
    :hook (company-mode . company-box-mode))

  ;; Java
  (use-package lsp-java
    :straight t
    :config (add-hook 'java-mode-hook 'lsp))

  (use-package go-mode
    :straight t
    :config (add-hook 'go-mode-hook 'lsp-deferred))

  (use-package terraform-mode
    :straight t
    :config (add-hook 'terraform-mode-hook 'lsp-deferred))
#+END_SRC
** Rustlang
#+BEGIN_SRC emacs-lisp
  (use-package rustic
    :straight t
    :bind (:map rustic-mode-map
		("M-j" . lsp-ui-imenu)
		("M-?" . lsp-find-references)
		("C-c C-c l" . flycheck-list-errors)
		("C-c C-c a" . lsp-execute-code-action)
		("C-c C-c r" . lsp-rename)
		("C-c C-c q" . lsp-workspace-restart)
		("C-c C-c Q" . lsp-workspace-shutdown)
		("C-c C-c s" . lsp-rust-analyzer-status))
    :config
    ;; comment to disable rustfmt on save
    (setq rustic-format-on-save t)
    (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

  (defun rk/rustic-mode-hook ()
    (add-hook 'before-save-hook 'lsp-format-buffer nil t))
#+END_SRC
* Org-Mode and Note Taking
I'm used to take notes into [[https://obsidian.md/][Obsidian]] and [[https://logseq.com/][Logseq]] and other alternatives.
Moving to org-mode is a way to bring everything (ie. Notes, Code, Mails, ...) in the same tool to avoid as much as possible swithing context.

Wy workflow is heavily inspired by the [[https://en.wikipedia.org/wiki/Zettelkasten][Zettelkasten Method]].

If we try to sum-up quickly, what I want to achieve with org-mode are the following goals:
- Get into Emacs everything that I read/highlight from my different devices (ie. I spend a big part of my time reading on my phone/tablette/Kindle)
- Being able to create without any friction new notes. Everytime that I have a thought.
- Link my notes together and discover new connected nodes in a Graph View like
- Being able to export and publish some notes in HTML, for example
- Managing my tasks and calendar in Emacs would be an amazing plus. Especially because I feel more productive when I'm able to plan and time-lock my day of work.
** org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight t
    :config
    (setq org-agenda-files
	  '("~/Documents/Org/Roam/daily"))
    (setq org-log-done 'time))
#+END_SRC
** [[https://www.orgroam.com/][org-roam]]
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :straight t
    :ensure t
    :custom
    (org-roam-directory "~/Documents/Org/Roam")
    :general
    (morsicus/leader-keys
      "o"   '(:ignore t :which-key "org")
      "ot"  '(:ignore t :which-key "org-task")
      "otd"  '(org-deadline :which-key "org-deadline")
      "ots"  '(org-schedule :which-key "org-schedule")
      "otl"  '(org-todo-list :which-key "org-todo-list")
      "otc"  '(org-roam-dailies-capture-today :which-key "org-todo-capture")
      "on"  '(:ignore t :which-key "org-notes")
      "ona"  '(org-roam-alias-add :which-key "roam-alias")
      "onc"  '(org-roam-capture :which-key "roam-capture")
      "onl"   '(org-roam-buffer-toggle :which-key "roam-list")
      "onf"   '(org-roam-node-find :which-key "roam-find")
      "onf"   '(org-roam-tag-add :which-key "roam-tag")
      "oni"   '(morsicus/org-roam-node-insert :which-key "roam-insert")
      "oj"  '(morsicus/hydra-org-roam-journal/body :which-key "roam-journal")
      "oo"  '(org-open-at-point :which-key "open"))
    :config
    (require 'org-roam-dailies)
    (org-roam-setup))
#+END_SRC
** org-roam research (with consult-ripgrep)
#+BEGIN_SRC emacs-lisp
  (defun morsicus/org-roam-rg-search ()
    "Search in org-roam database with consult-ripgrep"
    (interactive)
    (let ((consult-ripgrep-command "rg --null --ignore-case --type org --line-buffered --color=always --max-columns=500 --no-heading --line-number . -e ARG OPTS"))
      (consult-ripgrep "~/Documents/Org/Roam")))

  (require 'general)
  (morsicus/leader-keys
    "ons" '(morsicus/org-roam-rg-search :which-key "morsicus/org-roam-rg-search"))
#+END_SRC
*** Custom Hydra functions
**** Interactive menu to capture in daily entries
#+BEGIN_SRC emacs-lisp
  (require 'hydra)
  (defhydra morsicus/hydra-org-roam-capture-daily ()
    "
    Choose a Journal entry to capture in:
    _t_ Today
    _T_ Tomorrow
    _y_ Yesterday

    _q_ Do Nothing
    "
    ("q" nil)
    ("t" org-roam-dailies-capture-today)
    ("T" org-roam-dailies-capture-tomorrow)
    ("y" org-roam-dailies-capture-yesterday))
#+END_SRC
**** Interactive menu to quickly get a daily node
#+BEGIN_SRC emacs-lisp
  (require 'hydra)
  (defhydra morsicus/hydra-org-roam-journal ()
    "
    Choose a Journal entry to get:
    _t_ Today
    _T_ Tomorrow
    _y_ Yesterday
    _a_ Agenda (Choose a date)

    _q_ Do Nothing
    "
    ("q" nil)
    ("t" org-roam-dailies-goto-today)
    ("T" org-roam-dailies-goto-tomorrow)
    ("y" org-roam-dailies-goto-yesterday)
    ("a" org-roam-dailies-goto-date))
#+END_SRC
*** Custom function to fix the org-roam-node-insert in Evil mode
When using org-roam-node-insert function provided by org-roam with Evil in Normal mode I cannot smoothly create a new node in the current note.
The link to the node in added before the cursor. Which is annoying.

The following piece of code comes from [[https://gist.github.com/daniel-koudouna/39f03845914e34acde4d4c6a27c5176a][Gist]].
#+BEGIN_SRC emacs-lisp
  (defun morsicus/is-end-of-line ()
    "Compare point with end of line."
    (let* ((pos (current-column))
	   (end-pos (save-excursion
		      (evil-end-of-line)
		      (current-column))))
      (eq pos end-pos)))

  (defun morsicus/compare-with-end-of-word ()
    "Compare point with end of word."
    (let* ((pos (current-column))
	   (end-pos (save-excursion
		      (evil-backward-word-begin)
		      (evil-forward-word-end)
		      (current-column))))
      (- pos end-pos)))

  (defun morsicus/point-is-space ()
    "Check if point is whitespace."
    (char-equal ?\s (char-after)))

  (defun morsicus/insert-after (func)
    "Run FUNC after the end of word, ignoring whitespace."
    (interactive)
    (let ((relative-loc (morsicus/compare-with-end-of-word)))
      (cond ((morsicus/is-end-of-line)
	     (end-of-line)
	     (call-interactively func))
	    ((eq 0 relative-loc)
	     (evil-forward-char)
	     (call-interactively func))
	    ((and (> 0 relative-loc) (not (morsicus/point-is-space)))
	     (evil-forward-word-end)
	     (if (morsicus/is-end-of-line)
		 (end-of-line)
	       (evil-forward-char))
	     (call-interactively func))
	    (t
	     (call-interactively func)))))
  (defun morsicus/org-roam-node-insert ()
    "Custom org-roam-node-insert to ensure that the link appears after the cursor."
    (interactive)
    (morsicus/insert-after 'org-roam-node-insert))
#+END_SRC

** [[https://github.com/org-roam/org-roam-ui][org-roam-ui]]
#+BEGIN_SRC emacs-lisp
  (use-package org-roam-ui
    :straight t
    :after org-roam
    :general
    (morsicus/leader-keys
      "o"  '(:ignore t :which-key "org")
      "og" '(org-roam-ui-open :which-key "roam-graph")))
#+END_SRC

** [[https://github.com/minad/org-modern][org-modern]]
#+BEGIN_SRC emacs-lisp
  (use-package org-modern
    :straight t
    :config
    (global-org-modern-mode t))
#+END_SRC

** consult-org-mode
I'm not 100% sure to use this package. Let's say that I'll probably experiment a bit with it
#+BEGIN_SRC emacs-lisp
  (use-package consult-org-roam
   :straight t
   :after org-roam
   :init
   (require 'consult-org-roam)
   ;; Activate the minor mode
   (consult-org-roam-mode 1)
   :custom
   ;; Use `ripgrep' for searching with `consult-org-roam-search'
   (consult-org-roam-grep-func #'consult-ripgrep)
   ;; Configure a custom narrow key for `consult-buffer'
   (consult-org-roam-buffer-narrow-key ?r)
   ;; Display org-roam buffers right after non-org-roam buffers
   ;; in consult-buffer (and not down at the bottom)
   (consult-org-roam-buffer-after-buffers t)
   :config
   ;; Eventually suppress previewing for certain functions
   (consult-customize
    consult-org-roam-forward-links
    :preview-key (kbd "M-."))
   :bind
   ;; Define some convenient keybindings as an addition
   ("C-c n e" . consult-org-roam-file-find)
   ("C-c n b" . consult-org-roam-backlinks)
   ("C-c n l" . consult-org-roam-forward-links)
   ("C-c n r" . consult-org-roam-search))
#+END_SRC
